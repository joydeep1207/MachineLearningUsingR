LList <-linkListNode(5,linkListNode(2,create_emptyenv()))
create_emptyenv <- function() {
emptyenv()
}
isEmpty <- function(llist) {
if(class(llist)!= "linkList") warning("Not linkList class")
identical(llist, create_emptyenv())
}
linkListNode <- function(val, node=NULL) {
llist <- new.env(parent=create_emptyenv())
llist$element <- val
llist$nextnode <- node
class(llist) <- "linkList"
llist
}
LList <-linkListNode(5,linkListNode(2,create_emptyenv()))
LList
print(LList$element)
print(LList$nextnode)
print(LList[2]$element)
source('~/.active-rstudio-document')
sizeLinkList(LList)
floor(runif(5))
source('~/.active-rstudio-document')
floor(runif(5, min = 1, max = 50))
rawToChar(as.raw(65))
rawToChar(as.raw([a-zA-Z]))
samp<-c(2:9,letters,LETTERS,"!", "ยง", "$", "%", "&", "(", ")", "*")
paste(sample(samp,8),collapse="")
paste(sample(samp,8),collapse="")
samp
samp<-c(2:9,letters,LETTERS,"!", "\ยง", "$", "%", "&", "(", ")", "*")
samp<-c(1:9,letters,LETTERS,"!", "$", "%", "&", "(", ")", "*")
samp
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
k <- floor(runif(5, min = 1, max = 50))
for (i in length(k)){
samp<-c(1:9,letters,LETTERS,"!", "$", "%", "&", "(", ")", "*")
paste(sample(samp,k[i]),collapse="")
}
for (i in length(k)){
samp<-c(1:9,letters,LETTERS,"!", "$", "%", "&", "(", ")", "*")
print(paste(sample(samp,k[i]),collapse=""))
}
for (i in length(k)){
print( i)
samp<-c(1:9,letters,LETTERS,"!", "$", "%", "&", "(", ")", "*")
print(paste(sample(samp,k[i]),collapse=""))
}
for (i in 1:5){
print( i)
samp<-c(1:9,letters,LETTERS,"!", "$", "%", "&", "(", ")", "*")
print(paste(sample(samp,k[i]),collapse=""))
}
letters
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "/home/spark")
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "/home/spark")
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
sc <- sparkR.session()
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
spark_path <- strsplit(system("brew info apache-spark",intern=T)[4],' ')[[1]][1] # Get your spark path
.libPaths(c(file.path(spark_path,"libexec", "R", "lib"), .libPaths())) # Navigate to SparkR folder
library(SparkR) # Load the library
sc <- sparkR.session()
df <- as.DataFrame(faithful)
head(df)
help(lm)
linearMod <- lm(waiting~eduptions, df)
setwd("~/Documents/Code/LogisticRegression")
data <- read.csv("data.csv")
View(data)
plot(score.1, score.2, data)
plot(data$score.1, data$score.2, data)
plot(data$score.1,data$score.2)
plot(data$score.1,data$score.2, col=as.factor(data$label), xlab="Score-1", ylab="Score-2")
X <- as.matrix(data[,c(1,2)])
x
X
X <- cbind(rep(1,nrow(X)),X)
X
sigmoid <- function(z)
{
g <- 1/(1+exp(-z))
return(g)
}
cost <- function(theta)
{
m <- nrow(X)
g <- sigmoid(X%*%theta)
J <- (1/m)*sum((-Y*log(g)) - ((1-Y)*log(1-g)))
return(J)
}
initial_theta <- rep(0,ncol(X))
initial_theta <- rep(0,ncol(X))
cost(initial_theta)
source('~/Documents/Code/LogisticRegression/LogisticRegression.R')
theta_optim <- optim(par=initial_theta,fn=cost)
prob
Y <- as.matrix(data$label)
cost(initial_theta)
theta_optim <- optim(par=initial_theta,fn=cost)
theta_optim
theta_optim$value
prob <- sigmoid(t(c(1,45,85))%*%theta)
data$label = factor(data$label)
myLogit <- (label ~ score.1 + score.2, data)
myLogit <- glm(label ~ score.1 + score.2, data)
myLogit <- glm(label ~ score.1 + score.2, data, family = "binomial")
summary(myLogit)
test <- as.matrix(c(45,85))
names(test) <- c("score.1","score.2")
test
test <- data.frame(c(45,85))
names(test) <- c("score.1","score.2")
ncol(test) <- c("score.1","score.2")
test <- as.matrix(c(45,85))
names(test) <- c("score.1","score.2")
data.frame(test)
test <- data.frame(c(45,85))
View(test)
test <- data.frame(45,85)
View(test)
View(test)
colnames(test, c("score.1","score.2"))
test <- data.frame(45,85)
colnames(test,  do.NULL = TRUE, prefix = "col")
colnames(test) <- c("score.1","score.2"))
colnames(test) <- c("score.1","score.2")
View(test)
View(test)
predict(myLogit, test)
k = predict(myLogit, test)
k
source('~/Documents/Code/LogisticRegression/LogisticRegression.R')
k = predict(myLogit, test, type="response")
k
